import { jsPDF } from 'jspdf';
import { DocumentTemplate, DocumentRequest } from '../api/documents/types';

export const generateDocumentPDF = (
  template: DocumentTemplate,
  request: DocumentRequest,
  citizenData: any,
  signatureData?: string,
  stampData?: string
): string => {
  // Create new PDF document
  const doc = new jsPDF();
  
  // Set font
  doc.setFont('helvetica');
  
  // Add header
  doc.setFontSize(20);
  doc.text(template.title, 105, 20, { align: 'center' });
  
  // Add document details
  doc.setFontSize(12);
  doc.text(`Document Type: ${template.title}`, 20, 40);
  doc.text(`Purpose: ${request.purpose}`, 20, 50);
  doc.text(`Status: ${request.status}`, 20, 60);
  doc.text(`Created: ${new Date(request.created_at).toLocaleDateString()}`, 20, 70);
  
  // Add citizen information
  if (citizenData) {
    doc.text('Citizen Information:', 20, 90);
    doc.text(`Name: ${citizenData.first_name} ${citizenData.last_name}`, 20, 100);
    doc.text(`NIDA Number: ${citizenData.nida_number}`, 20, 110);
    doc.text(`Email: ${citizenData.email}`, 20, 120);
    doc.text(`Phone: ${citizenData.phone_number}`, 20, 130);
  }
  
  // Add template content with placeholders replaced
  let content = template.template_content;
  const placeholders = template.required_fields || [];
  
  // Replace placeholders with actual data
  placeholders.forEach((key) => {
    const regex = new RegExp(`{{${key}}}`, 'g');
    switch (key) {
      case 'full_name':
        content = content.replace(regex, `${citizenData.first_name} ${citizenData.last_name}`);
        break;
      case 'nida_number':
        content = content.replace(regex, citizenData.nida_number);
        break;
      case 'purpose':
        content = content.replace(regex, request.purpose);
        break;
      case 'date':
        content = content.replace(regex, new Date().toLocaleDateString());
        break;
      case 'sponsor_name':
        content = content.replace(regex, 'The Government');
        break;
      default:
        content = content.replace(regex, String(key));
    }
  });
  
  // Add the content
  doc.setFontSize(11);
  const splitContent = doc.splitTextToSize(content, 170);
  doc.text(splitContent, 20, 150);

  // Add signature if provided
  if (signatureData) {
    // Add signature at the bottom of the content
    const contentHeight = splitContent.length * 7; // Approximate height of content
    const signatureY = 150 + contentHeight + 20; // Position below content with some spacing
    
    // Add signature image
    doc.addImage(signatureData, 'PNG', 20, signatureY, 50, 25);
    
    // Add signature label
    doc.setFontSize(10);
    doc.text('Authorized Signature', 20, signatureY + 35);
  }

  // Add stamp if provided
  if (stampData) {
    // Add stamp at the bottom right
    const contentHeight = splitContent.length * 7; // Approximate height of content
    const stampY = 150 + contentHeight + 20; // Position below content with some spacing
    
    // Add stamp image
    doc.addImage(stampData, 'PNG', 120, stampY, 70, 70);
  }
  
  // Add footer
  doc.setFontSize(10);
  doc.text(
    'This is an official document generated by the Makazi System',
    105,
    280,
    { align: 'center' }
  );
  
  // Return the PDF as a data URL
  return doc.output('dataurlstring');
}; 